=== Overview ===
The goal here is to block ssh connections from unauthorized machines. This is achieved by using multiple layers of defense mechanisms such as

* Explicitly listing IP addresses or a range of IP addresses
* Country based blocking
* Blacklist based blocking

The approach is flexible enough to allow connections from authorized machines (also known as white listing).

=== Explicit listing ===
The first layer of defense is to explicitly list the IP address or a range of IP addresses in hosts.allow and hosts.deny files. An IP address in hosts.allow will always connect and an IP address in hosts.deny is always blocked. 

To block/allow a single IP
<pre>
ALL: <ip address>
</pre>

To block/allow a range of IPs
<pre>
ALL: starting_ip/subnet_mask
</pre>

For example

<pre>
ALL: 34.195.172.30
</pre>
or
<pre>
ALL: 120.192.0.0/255.192.0.0
</pre>

==== IP range and subnet mask ====

For a given IP address, the relevant range can be obtained from the abuse contact information listed in the whois record. For example 
<pre>
$ whois 120.205.199.218 | grep abuse
% Abuse contact for '120.192.0.0 - 120.255.255.255' is 'abuse@chinamobile.com'
...
</pre>
shows that the starting_ip is 120.192.0.0 and ending_ip is 120.255.255.255.

The subnet_mask can be obtained by 255.255.255.255 - (ending_ip - starting_ip) with the subtraction done on individual fields. So for the above IP range, the subnet mask is 255.255.255.255 - (120.255.255.255 - 120.192.0.0) = 255.255.255.255 - (0.(255-192).255.255) = 255.(255-(255-192)).0.0 = 255.192.0.0

The corresponding entry in hosts.deny / hosts.allow files would be 

<pre>
ALL: 120.192.0.0/255.192.0.0
</pre>

=== Country based access control ===
The second layer of defense is based on the country of the IP address. To allow or deny ssh connections based on it, change the ALLOW/DENY variables in the COUNTRIES section of the config.ini file and then call sshfilter.py in hosts.allow/hosts.deny files. For example

<pre>
$ cat config.ini
...
[COUNTRIES]
DENY = CN RU
ALLOW = IN US
...

$ cat hosts.allow
...
sshd: ALL: aclexec /usr/local/bin/sshfilter/sshfilter.py allow %a
...

$ cat hosts.deny
...
sshd: ALL: aclexec /usr/local/bin/sshfilter/sshfilter.py deny %a
...
</pre>

will allow connections from IP addresses in India and USA but block connections from Russia and China.

=== Blacklist based blocking ===
The third and final layer of defense is to check if the IP address is blacklisted. This requires access to a recent list of bad IPs stored in a file.

sshfilter.py gets this list by reading the file pointed to by the "black_list_file" variable in the DEFAULT section of config.ini . For example

<pre>
$ cat config.ini
...
[DEFAULT]
HOME = /home/raju
GITHUB_ROOT = ${HOME}/work/github
black_list_file = ${GITHUB_ROOT}/ipsum/levels/2.txt
</pre>

will read the blacklisted IPs from /home/raju/work/github/ipsum/levels/2.txt .

==== My blacklist file ====
I have a cron job that regularly downloads blacklisted IPs data from https://github.com/stamparm/ipsum/blob/master/levels/2.txt to /home/raju/work/github/ipsum/levels/2.txt . This ensures that I am always comparing against the latest set of bad boys.
